{"version":3,"file":"static/js/815.10d6599e.chunk.js","mappings":"0SAIO,SAASA,EAAT,GAAmC,IAAXC,EAAU,EAAVA,OACvBC,EAAe,CACnBC,KAAM,GACNC,MAAO,GACPC,SAAU,IAGZ,GAA0BC,EAAAA,EAAAA,WAAS,UAAKJ,IAAxC,eAAOK,EAAP,KAAcC,EAAd,KACQL,EAA0BI,EAA1BJ,KAAMC,EAAoBG,EAApBH,MAAOC,EAAaE,EAAbF,SACrB,GAA4BC,EAAAA,EAAAA,UAAS,CAAEF,MAAO,GAAIC,SAAU,KAA5D,eAAOI,EAAP,KAAeC,EAAf,KAEMC,EAAe,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACdT,EAAgBS,EAAhBT,KAAMU,EAAUD,EAAVC,MACdL,GAAS,SAAAM,GAAS,yBACbA,GADa,cAEfX,EAAOU,GAFQ,GAInB,EA0BKE,EAAgB,SAAAX,GAGpB,MADmB,6BACDY,KAAKZ,EACxB,EAEKa,EAAmB,SAAAZ,GAEvB,OAAOA,EAASa,QAAU,CAC3B,EAED,OACE,SAACC,EAAA,EAAD,CAAWC,UAAU,MAAMC,SAAS,KAApC,UACE,UAACC,EAAA,EAAD,CACEC,GAAI,CACFC,UAAW,EACXC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,gBAAiB,QAEjBC,QAAS,OACTC,UACE,oEAVN,WAaE,SAACC,EAAA,EAAD,CAAYC,QAAQ,KAApB,SAAyB,aACzB,UAACV,EAAA,EAAD,CAAKF,UAAU,OAAOa,SAnDP,SAAAC,GACnBA,EAAEC,iBAEGpB,EAAcX,GAQda,EAAiBZ,IAQtBJ,GAAO,UAAKM,IACZC,GAAS,UAAKN,IACdQ,EAAU,CAAEN,MAAO,GAAIC,SAAU,MAT/BK,GAAU,SAAA0B,GAAU,yBACfA,GADe,IAElB/B,SAAU,4CAFQ,IARpBK,GAAU,SAAA0B,GAAU,yBACfA,GADe,IAElBhC,MAAO,yBAFW,GAkBvB,EA6BmDmB,GAAI,CAAEc,GAAI,GAAxD,WACE,SAACC,EAAA,EAAD,CACEC,OAAO,SACPC,UAAQ,EACRC,WAAS,EACTC,MAAM,YACNvC,KAAK,OACLwC,aAAa,OACbC,WAAS,EACT/B,MAAOV,EACP6B,QAAQ,WACRa,SAAUlC,KAEZ,SAAC2B,EAAA,EAAD,CACEC,OAAO,SACPC,UAAQ,EACRC,WAAS,EACTC,MAAM,gBACNvC,KAAK,QACLwC,aAAa,QACbG,KAAK,QACLjC,MAAOT,EACP4B,QAAQ,WACRe,QAAStC,EAAOL,MAChB4C,WAAYvC,EAAOL,MACnByC,SAAUlC,KAEZ,SAAC2B,EAAA,EAAD,CACEC,OAAO,SACPC,UAAQ,EACRC,WAAS,EACTtC,KAAK,WACLuC,MAAM,WACNI,KAAK,WACLH,aAAa,mBACb9B,MAAOR,EACP2B,QAAQ,WACRe,QAAStC,EAAOJ,SAChB2C,WAAYvC,EAAOJ,SACnBwC,SAAUlC,KAGZ,SAACsC,EAAA,EAAD,CAAQH,KAAK,SAASd,QAAQ,WAAWkB,KAAK,QAA9C,SAAsD,mBAO/D,C,iCChGD,EAnBqB,WACnB,IAAMC,GAAWC,EAAAA,EAAAA,MACTC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IAAvBF,OAUR,OACE,+BACE,SAACrD,EAAD,CAAcC,OAVC,SAAAuD,GACjBC,QAAQC,IAAIF,GACG,MAAXH,GACFM,EAAAA,GAAAA,QAAc,8BAEhBR,GAASS,EAAAA,EAAAA,IAAOJ,GACjB,KAOF,C","sources":["components/RegisterForm/RegisterForm.jsx","pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["import { Button, TextField, Box, Container, Typography } from '@mui/material';\n\nimport { useState } from 'react';\n\nexport function RegisterForm({ onData }) {\n  const initialState = {\n    name: '',\n    email: '',\n    password: '',\n  };\n\n  const [state, setState] = useState({ ...initialState });\n  const { name, email, password } = state;\n  const [errors, setErrors] = useState({ email: '', password: '' });\n\n  const handleChange = ({ target }) => {\n    const { name, value } = target;\n    setState(prevState => ({\n      ...prevState,\n      [name]: value,\n    }));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (!validateEmail(email)) {\n      setErrors(prevErrors => ({\n        ...prevErrors,\n        email: 'Invalid email address',\n      }));\n      return;\n    }\n\n    if (!validatePassword(password)) {\n      setErrors(prevErrors => ({\n        ...prevErrors,\n        password: 'Password must have at least 8 characters',\n      }));\n      return;\n    }\n\n    onData({ ...state });\n    setState({ ...initialState });\n    setErrors({ email: '', password: '' });\n  };\n\n  const validateEmail = email => {\n    // Basic email validation\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  };\n\n  const validatePassword = password => {\n    // Password must have at least 8 characters\n    return password.length >= 8;\n  };\n\n  return (\n    <Container component=\"div\" maxWidth=\"xs\">\n      <Box\n        sx={{\n          marginTop: 8,\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          backgroundColor: 'white',\n\n          padding: '20px',\n          boxShadow:\n            '0px 4px 10px rgba(0, 0, 0, 0.1), 0px 4px 8px rgba(0, 0, 0, 0.05)',\n        }}\n      >\n        <Typography variant=\"h4\">Sign Up</Typography>\n        <Box component=\"form\" onSubmit={handleSubmit} sx={{ mt: 1 }}>\n          <TextField\n            margin=\"normal\"\n            required\n            fullWidth\n            label=\"User name\"\n            name=\"name\"\n            autoComplete=\"name\"\n            autoFocus\n            value={name}\n            variant=\"standard\"\n            onChange={handleChange}\n          />\n          <TextField\n            margin=\"normal\"\n            required\n            fullWidth\n            label=\"Email Address\"\n            name=\"email\"\n            autoComplete=\"email\"\n            type=\"email\"\n            value={email}\n            variant=\"standard\"\n            error={!!errors.email}\n            helperText={errors.email}\n            onChange={handleChange}\n          />\n          <TextField\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"password\"\n            label=\"Password\"\n            type=\"password\"\n            autoComplete=\"current-password\"\n            value={password}\n            variant=\"standard\"\n            error={!!errors.password}\n            helperText={errors.password}\n            onChange={handleChange}\n          />\n\n          <Button type=\"submit\" variant=\"outlined\" size=\"small\">\n            Sign Up\n          </Button>\n        </Box>\n      </Box>\n    </Container>\n  );\n}\n","import { useDispatch } from 'react-redux';\nimport { RegisterForm } from 'components/RegisterForm/RegisterForm';\nimport { signUp } from 'redux/auth/authAsyncActions';\nimport { useSelector } from 'react-redux';\nimport { getAuthError } from 'redux/auth/authUtils';\n\nimport toast from 'react-hot-toast';\n\nconst RegisterPage = () => {\n  const dispatch = useDispatch();\n  const { status } = useSelector(getAuthError);\n\n  const onRegister = data => {\n    console.log(data);\n    if (status === 400) {\n      toast.success('You are already authorized');\n    }\n    dispatch(signUp(data));\n  };\n\n  return (\n    <>\n      <RegisterForm onData={onRegister} />\n    </>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["RegisterForm","onData","initialState","name","email","password","useState","state","setState","errors","setErrors","handleChange","target","value","prevState","validateEmail","test","validatePassword","length","Container","component","maxWidth","Box","sx","marginTop","display","flexDirection","alignItems","backgroundColor","padding","boxShadow","Typography","variant","onSubmit","e","preventDefault","prevErrors","mt","TextField","margin","required","fullWidth","label","autoComplete","autoFocus","onChange","type","error","helperText","Button","size","dispatch","useDispatch","status","useSelector","getAuthError","data","console","log","toast","signUp"],"sourceRoot":""}